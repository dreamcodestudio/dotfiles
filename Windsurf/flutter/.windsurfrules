// Flutter Development Guidelines for Windsurf

// General Guidelines
- Follow official Flutter style guide
- Use latest stable Flutter version
- Review breaking changes during updates

// 1. Code Organization
- Use feature-based directory structure
- Organize lib/ directory:
  - Features (auth, home, profile)
  - Common (shared components)
  - Core (services, theme)
- Use snake_case for file names
- File names should reflect main class (user_profile_screen.dart for UserProfileScreen)
- Implement layered architecture in modules
- Create reusable components
- Separate presentation from business logic
- Follow Single Responsibility Principle

// 2. Design Patterns
- Use BLoC, Provider, or Riverpod for state management
- Prefer async/await for asynchronous operations
- Use http or dio for API requests
- Implement shared_preferences, sqflite, hive or isar for data persistence
- Use go_router or auto_route for navigation
- Use Form with TextFormField for form handling

// Anti-patterns to Avoid
- Massive widgets with too much logic
- Business logic inside widgets
- Deeply nested widget trees
- Unmanaged state (not disposing resources)
- Hardcoded values (colors, strings)
- Ignoring errors (use try-catch and logging)

// State Management
- Keep state close to where it's needed
- Use immutable data structures
- Separate state from UI
- Manage side effects properly
- Consider streams for complex state transitions

// Error Handling
- Use try-catch blocks for exceptions
- Implement custom error classes
- Log errors for debugging
- Show user-friendly error messages
- Handle async errors with Future.catchError

// 3. Performance
- Use const constructors for immutable widgets
- Minimize setState calls
- Use ListView.builder for large lists
- Apply RepaintBoundary for static UI sections
- Use Opacity and Clip sparingly
- Dispose resources (StreamSubscription, AnimationController)
- Reduce widget tree complexity
- Optimize image loading and caching
- Minimize global variables and static fields

// Bundle Optimization
- Split APK by ABI
- Remove unused assets and code
- Compress images
- Use code obfuscation
- Implement deferred loading

// 4. Security
- Sanitize user input
- Encrypt sensitive data
- Use HTTPS for API communication
- Implement certificate pinning
- Validate user input on client and server
- Use secure authentication (OAuth 2.0, OpenID)
- Implement multi-factor authentication when possible
- Use secure storage (Keychain/Keystore)
- Follow least privilege principle

// 5. Testing
- Write unit tests for business logic
- Create widget tests for UI components
- Implement integration tests
- Test with external services
- Perform end-to-end testing
- Mirror lib/ structure in test/ directory
- Use mockito for mocking
- Keep tests small and focused

// 6. Common Pitfalls
- Always dispose resources
- Handle all errors appropriately
- Avoid hardcoded values
- Test edge cases (network, orientation, background state)
- Consider localization and accessibility
- Test on different devices and platforms
- Use version constraints in pubspec.yaml

// 7. Tooling
- Use Android Studio
- Apply Flutter DevTools for debugging
- Use flutter_lints package
- Configure auto-formatting
- Implement CI/CD with GitHub Actions or similar
- Automate testing and deployment
- Monitor app performance after release
