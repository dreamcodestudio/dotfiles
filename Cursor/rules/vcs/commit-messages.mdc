---
description:
globs:
alwaysApply: true 
---
# Commit Message Guidelines

This project follows the [Conventional Commits](https://www.conventionalcommits.org/) specification for creating clear and structured commit messages.

## Commit Message Format

Each commit message consists of a **header**, an optional **body**, and an optional **footer**:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Header

The header is mandatory and must conform to the following format:

- **type**: What kind of change is being made (e.g., feat, fix, docs)
- **scope** (optional): What section of the codebase is affected
- **description**: A short summary of the changes

### Types

- **feat**: A new feature
- **fix**: A bug fix
- **docs**: Documentation changes
- **style**: Changes that do not affect code meaning (white-space, formatting, etc.)
- **refactor**: Code changes that neither fix a bug nor add a feature
- **perf**: Performance improvements
- **test**: Adding or correcting tests
- **build**: Changes to build system or external dependencies
- **ci**: Changes to CI configuration files and scripts
- **chore**: Other changes that don't modify src or test files

### Breaking Changes

Breaking changes must be indicated in one of two ways:

1. Adding a `!` after the type/scope: `feat(api)!: remove deprecated endpoint`
2. Adding a `BREAKING CHANGE:` footer: 
   ```
   feat: change authentication flow
   
   BREAKING CHANGE: requires new token format
   ```

### Examples

#### Simple feature addition
```
feat: add user profile picture upload
```

#### Bug fix with scope
```
fix(auth): prevent session timeout during active use
```

#### Documentation update
```
docs: update README with new setup instructions
```

#### Breaking change with explanation
```
feat(api)!: change response format to JSON API spec

BREAKING CHANGE: API responses now follow the JSON API specification.
All clients need to be updated to parse the new response format.
```

#### Commit with body for additional context
```
fix: address memory leak in texture loading

The texture manager wasn't properly disposing textures when scenes
were unloaded, causing memory usage to grow over time.
```

## Best Practices

1. Keep the description concise and under 72 characters
2. Use the imperative, present tense: "add" not "added" or "adds"
3. Don't capitalize the first letter of the description
4. Don't put a period at the end of the description
5. Provide context in the commit body about what and why (not how)
6. Reference issues and pull requests in the footer with "Refs: #123" or "Closes: #123"

## Tools

Consider using tools like [Commitizen](https://github.com/commitizen/cz-cli) or [Commitlint](https://github.com/conventional-changelog/commitlint) to help follow these conventions.
